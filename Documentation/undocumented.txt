Schema.swift
	public enum AvroType
	case ANull
	case ABoolean
	case AInt
	case ALong
	case AFloat
	case ADouble
	case AString
	case ABytes
	case AEnum
	case AFixed
	case ARecord
	case AArray
	case AMap
	case AInvalidType
	public enum Schema
	case AvroNullSchema
	case AvroBooleanSchema
	case AvroIntSchema
	case AvroLongSchema
	case AvroFloatSchema
	case AvroDoubleSchema
	case AvroStringSchema
	case AvroBytesSchema
	case AvroArraySchema(Box<Schema>)
	case AvroMapSchema(Box<Schema>)
	case AvroUnionSchema(Array<Schema>)
	case AvroFixedSchema(String, Int)
	case AvroEnumSchema(String, Array<String>)
	case AvroRecordSchema(String, Array<Schema>)
	case AvroFieldSchema(String, Box<Schema>)
	case AvroInvalidSchema
	public func parsingCanonicalForm(inout existingTypes: [String]) -> String?
	public func fingerprint() -> [UInt8]?
	public init(_ json: NSData?)
	public init(_ json: String)
	public func ==(lhs: Schema, rhs: Schema) -> Bool
AvroDecoder.swift
	public class AvroDecoder
	public init(_ data:NSData)
	public init(_ data:[UInt8])
	public func decodeNull()
	public func decodeBoolean() -> Bool?
	public func decodeDouble() -> Double?
	public func decodeFloat() -> Float?
	public func decodeInt() -> Int32?
	public func decodeLong() -> Int64?
	public func decodeBytes() -> [UInt8]?
	public func decodeString() -> String?
	public func decodeFixed(size: Int) -> [UInt8]?
Boxes.swift
	public final class Box<T>
	public init(_ value : T)
	public var value: T
	public func map<U>(f: T -> U) -> Box<U>
AvroEncoder.swift
	public class AvroEncoder
	public init()
AvroConvertible.swift
	public protocol AvroValueConvertible
	func toAvro() -> AvroValue
	public func toAvro() -> AvroValue
	public func toAvro() -> AvroValue
	public func toAvro() -> AvroValue
	public func toAvro() -> AvroValue
	public func toAvro() -> AvroValue
	public func toAvro() -> AvroValue
	public func toAvro() -> AvroValue
Varint.swift
	public struct Varint
	public var count: Int
	public var description: String
	public init(fromValue value:UInt)
	public init(fromValue value:UInt64)
	public func toInt64() -> Int64
	public func toUInt64() -> UInt64
	public static func VarintFromBytes(bytes: [UInt8]) -> Varint?
	public struct Varint
	public init(fromValue value:Int64)
	public init(fromValue value:Int)
	public func encodeZigZag() -> UInt64
	public func decodeZigZag() -> Int64
AvroValue.swift
	public func +=<K, V> (inout left: Dictionary<K, V>, right: Dictionary<K, V>) -> Dictionary<K, V>
	public enum AvroValue
	case AvroNullValue
	case AvroBooleanValue(Bool)
	case AvroIntValue(Int32)
	case AvroLongValue(Int64)
	case AvroFloatValue(Float)
	case AvroDoubleValue(Double)
	case AvroBytesValue([UInt8])
	case AvroStringValue(String)
	case AvroArrayValue([AvroValue])
	case AvroMapValue(Dictionary<String, AvroValue>)
	case AvroUnionValue(Int, Box<AvroValue>)
	case AvroRecordValue(Dictionary<String, AvroValue>)
	case AvroEnumValue(Int, String)
	case AvroFixedValue([UInt8])
	case AvroInvalidValue
	public var boolean: Bool?
	public var string: String?
	public var integer: Int32?
	public var long: Int64?
	public var float: Float?
	public var double: Double?
	public var bytes: [UInt8]?
	public var array: Array<AvroValue>?
	public var map: Dictionary<String, AvroValue>?
	public var record: Dictionary<String, AvroValue>?
	public var enumeration: String?
	public var fixed: [UInt8]?
	public func encode(encoder: AvroEncoder) -> [UInt8]?
	public init(jsonSchema: String, withBytes bytes: [UInt8])
	public init(jsonSchema: String, withData data: NSData)
	public init(schema: Schema, withBytes bytes: [UInt8])
	public init(schema: Schema, withData data: NSData)
	public enum AvroValue
	public init(nilLiteral: ())
	public enum AvroValue
	public init(booleanLiteral value: Bool)
	public enum AvroValue
	public init(integerLiteral value: IntegerLiteralType)
	public enum AvroValue
	public init(floatLiteral value: FloatLiteralType)
	public enum AvroValue
	public init(unicodeScalarLiteral value: String)
	public init(extendedGraphemeClusterLiteral value: String)
	public init(stringLiteral value: String)
	public enum AvroValue
	public init(arrayLiteral elements: AvroValue...)
	public enum AvroValue
	public init(dictionaryLiteral elements:(String, AvroValue)...)
	public enum AvroValue
